# THIS FILE WAS GENERATED BY 'tool/ast.py' DO NOT MODIFY

from pydantic.dataclasses import dataclass
from typing import Any, TypeVar, Generic
from abc import abstractmethod, ABC

from ..utils import LoxType
from ..token import Token
from .expr import Expr

T = TypeVar("T")

class Visitor(ABC, Generic[T]):
	@abstractmethod
	def visitBlockStmt(self, stmt: "Block") -> T: ...
	@abstractmethod
	def visitExpressionStmt(self, stmt: "Expression") -> T: ...
	@abstractmethod
	def visitIfStmt(self, stmt: "If") -> T: ...
	@abstractmethod
	def visitPrintStmt(self, stmt: "Print") -> T: ...
	@abstractmethod
	def visitVarStmt(self, stmt: "Var") -> T: ...

@dataclass
class Stmt:
	@abstractmethod
	def accept(self, visitor: Visitor) -> Any: ...

@dataclass
class Block(Stmt):
	statements: list[Stmt]

	def accept(self, visitor: Visitor) -> Any:
		return visitor.visitBlockStmt(self)

@dataclass
class Expression(Stmt):
	expression: Expr

	def accept(self, visitor: Visitor) -> Any:
		return visitor.visitExpressionStmt(self)

@dataclass
class If(Stmt):
	condition: Expr
	thenBranch: Stmt
	elseBranch: Stmt | None

	def accept(self, visitor: Visitor) -> Any:
		return visitor.visitIfStmt(self)

@dataclass
class Print(Stmt):
	expression: Expr

	def accept(self, visitor: Visitor) -> Any:
		return visitor.visitPrintStmt(self)

@dataclass
class Var(Stmt):
	name: Token
	initializer: Expr | None

	def accept(self, visitor: Visitor) -> Any:
		return visitor.visitVarStmt(self)
