# THIS FILE WAS GENERATED BY 'tool/ast.py' DO NOT MODIFY

from pydantic.dataclasses import dataclass
from typing import Any, TypeVar, Generic
from abc import abstractmethod, ABC

from ..token import Token
from .expr import Expr, Variable

T = TypeVar("T")

class Visitor(ABC, Generic[T]):
	@abstractmethod
	def visitBlockStmt(self, stmt: "Block") -> T: ...
	@abstractmethod
	def visitClassStmt(self, stmt: "Class") -> T: ...
	@abstractmethod
	def visitExpressionStmt(self, stmt: "Expression") -> T: ...
	@abstractmethod
	def visitFunctionStmt(self, stmt: "Function") -> T: ...
	@abstractmethod
	def visitIfStmt(self, stmt: "If") -> T: ...
	@abstractmethod
	def visitPrintStmt(self, stmt: "Print") -> T: ...
	@abstractmethod
	def visitReturnStmt(self, stmt: "Return") -> T: ...
	@abstractmethod
	def visitVarStmt(self, stmt: "Var") -> T: ...
	@abstractmethod
	def visitWhileStmt(self, stmt: "While") -> T: ...

# Required to be frozen and eq since they are used as keys in dicts and need to be hashable
@dataclass(eq=True, frozen=True)
class Stmt:
	@abstractmethod
	def accept(self, visitor: Visitor) -> Any: ...

@dataclass(eq=True, frozen=True)
class Block(Stmt):
	statements: list[Stmt]

	def accept(self, visitor: Visitor) -> Any:
		return visitor.visitBlockStmt(self)

@dataclass(eq=True, frozen=True)
class Class(Stmt):
	name: Token
	superclass: Variable | None
	methods: list["Function"]

	def accept(self, visitor: Visitor) -> Any:
		return visitor.visitClassStmt(self)

@dataclass(eq=True, frozen=True)
class Expression(Stmt):
	expression: Expr

	def accept(self, visitor: Visitor) -> Any:
		return visitor.visitExpressionStmt(self)

@dataclass(eq=True, frozen=True)
class Function(Stmt):
	name: Token
	params: list[Token]
	body: list[Stmt]

	def accept(self, visitor: Visitor) -> Any:
		return visitor.visitFunctionStmt(self)

@dataclass(eq=True, frozen=True)
class If(Stmt):
	condition: Expr
	thenBranch: Stmt
	elseBranch: Stmt | None

	def accept(self, visitor: Visitor) -> Any:
		return visitor.visitIfStmt(self)

@dataclass(eq=True, frozen=True)
class Print(Stmt):
	expression: Expr

	def accept(self, visitor: Visitor) -> Any:
		return visitor.visitPrintStmt(self)

@dataclass(eq=True, frozen=True)
class Return(Stmt):
	keyword: Token
	value: Expr | None

	def accept(self, visitor: Visitor) -> Any:
		return visitor.visitReturnStmt(self)

@dataclass(eq=True, frozen=True)
class Var(Stmt):
	name: Token
	initializer: Expr | None

	def accept(self, visitor: Visitor) -> Any:
		return visitor.visitVarStmt(self)

@dataclass(eq=True, frozen=True)
class While(Stmt):
	condition: Expr
	body: Stmt

	def accept(self, visitor: Visitor) -> Any:
		return visitor.visitWhileStmt(self)
