# THIS FILE WAS GENERATED BY 'tool/ast.py' DO NOT MODIFY

from pydantic.dataclasses import dataclass
from typing import Any, TypeVar, Generic
from abc import abstractmethod, ABC

from ..token import Token

T = TypeVar("T")

class Visitor(ABC, Generic[T]):
	@abstractmethod
	def visitAssignExpr(self, expr: "Assign") -> T: ...
	@abstractmethod
	def visitBinaryExpr(self, expr: "Binary") -> T: ...
	@abstractmethod
	def visitCallExpr(self, expr: "Call") -> T: ...
	@abstractmethod
	def visitGroupingExpr(self, expr: "Grouping") -> T: ...
	@abstractmethod
	def visitLiteralExpr(self, expr: "Literal") -> T: ...
	@abstractmethod
	def visitLogicalExpr(self, expr: "Logical") -> T: ...
	@abstractmethod
	def visitUnaryExpr(self, expr: "Unary") -> T: ...
	@abstractmethod
	def visitVariableExpr(self, expr: "Variable") -> T: ...

@dataclass
class Expr:
	@abstractmethod
	def accept(self, visitor: Visitor) -> Any: ...

@dataclass
class Assign(Expr):
	name: Token
	value: Expr

	def accept(self, visitor: Visitor) -> Any:
		return visitor.visitAssignExpr(self)

@dataclass
class Binary(Expr):
	left: Expr
	operator: Token
	right: Expr

	def accept(self, visitor: Visitor) -> Any:
		return visitor.visitBinaryExpr(self)

@dataclass
class Call(Expr):
	callee: Expr
	paren: Token
	arguments: list[Expr]

	def accept(self, visitor: Visitor) -> Any:
		return visitor.visitCallExpr(self)

@dataclass
class Grouping(Expr):
	expression: Expr

	def accept(self, visitor: Visitor) -> Any:
		return visitor.visitGroupingExpr(self)

@dataclass
class Literal(Expr):
	value: object

	def accept(self, visitor: Visitor) -> Any:
		return visitor.visitLiteralExpr(self)

@dataclass
class Logical(Expr):
	left: Expr
	operator: Token
	right: Expr

	def accept(self, visitor: Visitor) -> Any:
		return visitor.visitLogicalExpr(self)

@dataclass
class Unary(Expr):
	operator: Token
	right: Expr

	def accept(self, visitor: Visitor) -> Any:
		return visitor.visitUnaryExpr(self)

@dataclass
class Variable(Expr):
	name: Token

	def accept(self, visitor: Visitor) -> Any:
		return visitor.visitVariableExpr(self)
