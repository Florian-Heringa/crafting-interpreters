from pathlib import Path

def generate_ast_file(base_name: str,
                       data: list[str]):
    
    lines = [
        "# THIS FILE WAS GENERATED BY 'tool/ast.py' DO NOT MODIFY",
        "",
        "from pydantic.dataclasses import dataclass",
        "from typing import Any",
        "from abc import abstractmethod",
        "",
        "from ..token import Token",
        "",
    ]

    lines += _define_visitor(base_name, data)

    lines += [
        "@dataclass",
        f"class {base_name}:",
        "\t@abstractmethod",
        "\tdef accept(self, visitor: Visitor) -> Any: ...",
        "",
    ]

    for ast_data in data:
        name, spec_string = map(lambda s: s.strip(), ast_data.split("-"))
        lines += _generate_ast_class(base_name, name, spec_string)

    (Path(__file__).resolve().parent.parent / f"plox_lib/asts/{base_name.lower()}.py").write_text("\n".join(lines))


def _generate_ast_class(base_class: str, class_name: str, description: str) -> list[str]:
    lines = [
        "@dataclass",
        f"class {class_name}({base_class}):",
    ]

    spec_list = description.split(",")
    for item in spec_list:
        field, rest = map(str.strip, item.split(":", 1))
        lines.append(f"\t{field}: {rest}")
    
    lines += [
        "",
        "\tdef accept(self, visitor: Visitor) -> Any:",
        f"\t\treturn visitor.visit{class_name}{base_class}(self)",
    ]

    return lines + [""]

def _define_visitor(base_name: str, description) -> list[str]:
    lines = ["class Visitor:"]

    for item in description:
        type_name, _ = map(str.strip, item.split("-", 1))
        lines.append("\t@abstractmethod")
        lines.append(f"\tdef visit{type_name}{base_name}(self, {base_name.lower()}: \"{type_name}\") -> Any: ...")
    lines.append("")
    return lines

if __name__ == "__main__":
    # Make sure the Expr trees exist and are up to date
    generate_ast_file("Expr", [
        "Binary - left: Expr, operator: Token, right: Expr",
        "Grouping - expression: Expr",
        "Literal - value: str | float | bool | None",
        "Unary - operator: Token, right: Expr",
    ])